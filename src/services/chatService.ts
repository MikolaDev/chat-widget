import { type IMessage } from '@/types/message.ts'
import { MAX_NUMBER_MESSAGES_IN_CHAT, useChatStore } from '@/stores/chat.ts'

const simulateTypingDelay = (min = 1000, max = 1800) =>
  new Promise((resolve) => setTimeout(resolve, Math.random() * (max - min) + min))

export const ChatService: {
  isCanSendMessages: boolean
  getAssistantMessage: (message: string) => Promise<IMessage | null>
} = {
  isCanSendMessages: true,
  async getAssistantMessage(message: string): Promise<IMessage | null> {
    const chatStore = useChatStore()

    await simulateTypingDelay()

    const answerFunctions = {
      reverseMessage: (message: string): string => {
        return message.split('').reverse().join('')
      },
      reverseMessageByWords: (message: string): string => {
        return message
          .split(' ')
          .map((item) => item.split('').reverse().join(''))
          .join(' ')
      },
      encodeBase64: (message: string): string => {
        return btoa(unescape(encodeURIComponent(message)))
      },
    }

    let reply = ''
    if (
      ['–ü—Ä–∏–≤–µ—Ç', 'Tere', 'Hi', 'Hello'].some((greet) =>
        message.toLowerCase().includes(greet.toLowerCase()),
      )
    ) {
      reply = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
    } else if (message.toLowerCase().includes('clear')) {
      chatStore.clearMessages()
      return null
    } else if (chatStore.messages.length > MAX_NUMBER_MESSAGES_IN_CHAT) {
      chatStore.isCanSendMessages = false
      reply = `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –Ø –≤—ã–Ω—É–∂–¥–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç, —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤–µ—Ä–Ω—É—Å—å, –Ω–æ –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É. –ñ–µ–ª–∞—é –≤–∞–º –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∏ —É–¥–∞—á–∏! –î–æ —Å–≤—è–∑–∏! üòä`
    } else {
      const functions = Object.values(answerFunctions)
      reply = functions[Math.floor(Math.random() * functions.length)](message)
    }

    return chatStore.createAssistantMessage(reply)
  },
}
